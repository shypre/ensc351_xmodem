//============================================================================
//
//% Student Name 1: student1
//% Student 1 #: 123456781
//% Student 1 userid (email): stu1 (stu1@sfu.ca)
//
//% Student Name 2: student2
//% Student 2 #: 123456782
//% Student 2 userid (email): stu2 (stu2@sfu.ca)
//
//% Below, edit to list any people who helped you with the code in this file,
//%      or put 'None' if nobody helped (the two of) you.
//
// Helpers: _everybody helped us/me with the assignment (list names or put 'None')__
//
// Also, list any resources beyond the course textbooks and the course pages on Piazza
// that you used in making your submission.
//
// Resources:  ___________
//
//%% Instructions:
//% * Put your name(s), student number(s), userid(s) in the above section.
//% * Also enter the above information in other files to submit.
//% * Edit the "Helpers" line and, if necessary, the "Resources" line.
//% * Your group name should be "P2_<userid1>_<userid2>" (eg. P2_stu1_stu2)
//% * Form groups as described at:  https://courses.cs.sfu.ca/docs/students
//% * Submit files to courses.cs.sfu.ca
//
// File Name   : ReceiverX.cpp
// Version     : September 3rd, 2019
// Description : Starting point for ENSC 351 Project Part 2
// Original portions Copyright (c) 2019 Craig Scratchley  (wcs AT sfu DOT ca)
//============================================================================

#include <string.h> // for memset()
#include <fcntl.h>
#include <stdint.h>
#include <iostream>
#include "myIO.h"
#include "ReceiverX.h"
#include "VNPE.h"

//using namespace std;

ReceiverX::
ReceiverX(int d, const char *fname, bool useCrc)
:PeerX(d, fname, useCrc), 
NCGbyte(useCrc ? 'C' : NAK),
goodBlk(false), 
goodBlk1st(false), 
syncLoss(false),
numLastGoodBlk(0)
{
}

void ReceiverX::receiveFile()
{
	mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
	transferringFileD = PE2(myCreat(fileName, mode), fileName);

	// ***** improve this member function *****

	// below is just an example template.  You can follow a
	// 	different structure if you want.

	uint8_t blkNum = 1;
	enum {S_START, S_RECV, S_VBLKNUM, S_VCS, S_VCRC, S_WRITE, S_EOT, S_ERROR};
	int state = S_START;

	while(true)
	{
	    std::cout << "Receiver current state: " << state << std::endl;
	    if (state == S_ERROR)
	    {
	        std::cerr << "Fatal error: exiting" << std::endl;
	    }

	    else if (state == S_START)
	    {
	        // inform sender that the receiver is ready and that the
	        //      sender can send the first block
	        sendByte(NCGbyte);
	        state = S_RECV;
	    }

	    else if (state == S_EOT)
	    {
	        std::cout << "Receiver got EOT" << std::endl;
	        //sendByte(NAK);
            //PE_NOT(myRead(mediumD, rcvBlk, 1), 1);  // presumably read in another EOT
            std::cout << "Receiver received (first) byte: " << (int)rcvBlk[0] << std::endl;
            if (rcvBlk[0] == EOT)
            {
                sendByte(ACK); // ACK the second EOT
                break;
            }
            else
            {
                state = S_ERROR;
            }
	    }

	    else if (state == S_RECV)
	    {
	        PE_NOT(myRead(mediumD, rcvBlk, 1), 1);
            std::cout << "Receiver received (first) byte: " << (int)rcvBlk[0] << std::endl;
	        if (rcvBlk[0] == EOT)
	        {
	            sendByte(NAK); // NAK the first EOT
	            state = S_EOT;
	        }
	        else if (rcvBlk[0] != SOH)
	        {
	            syncLoss = true;
	            goodBlk = false;
	            goodBlk1st = false;
	            result = "Fatal error: SOH byte corrupt";
	            std::cout << result << std::endl;
	            break;
	        }
	        getRestBlk();
	        state = S_VBLKNUM;
	    }

	    else if (state == S_VBLKNUM)
	    {
	        //check block number
	        if (rcvBlk[1] != 255 - rcvBlk[2])
	        {
	            //result = "Block number does not match";
	            std::cout << "Block number does not match complement" << std::endl;
	            sendByte(NAK);
	            state = S_RECV;
	        }
	        //check received blkNum to local blkNum
	        else if (blkNum != rcvBlk[1])
	        {
	            //if received previous block, send ACK but don't write
	            if (blkNum - 1 == rcvBlk[1])
	            {
	                std::cout << "Received duplicate block, ignoring: " << (int)rcvBlk[1] << std::endl;
	                sendByte(ACK);
	                state = S_RECV;
	            }
	            else
	            {
	                syncLoss = true;
	                state = S_ERROR;
	                result = "Fatal error: block number synchronization loss";
	                std::cout << result << std::endl;
	                break;
	            }
	        }
	        else
	        {
	            state = Crcflg ? S_VCRC : S_VCS;
	        }
	    }

	    else if (state == S_VCRC)
	    {
	        //verify CRC

            uint16_t crcNum = 0;
            crc16ns(&crcNum, &rcvBlk[3]);
            if (memcmp(&crcNum, &rcvBlk[3+CHUNK_SZ], 2))
            {
                result = "CRC does not match";
                std::cout << result << " at block: " << (int)rcvBlk[1] << std::endl;
                sendByte(NAK);
                state = S_RECV;
            }
            else
            {
                state = S_WRITE;
            }
	    }

	    else if (state == S_VCS)
        {
	        //verify checksum
            uint8_t checksum = 0;
            for (int i = 3; i < 3 + CHUNK_SZ; ++i)
            {
                checksum += rcvBlk[i];
            }
            if (checksum != rcvBlk[3+CHUNK_SZ])
            {
                result = "Checksum does not match";
                std::cout << result << " at block: " << (int)rcvBlk[1] << std::endl;
                sendByte(NAK);
                state = S_RECV;
            }
            else
            {
                state = S_WRITE;
            }
	    }

	    else if (state == S_WRITE)
	    {
	        sendByte(ACK);
	        std::cout << "Received block successfully: " << (int)rcvBlk[1] << std::endl;
	        writeChunk();
	        ++blkNum;
	        state = S_RECV;
	    }
	}
    if (close(transferringFileD) != 0)
    {
        // check if the file closed properly.  If not, result should be something other than "Done".
        result = "File did not close properly";
    }
    else
    {
        result = "Done"; //assume the file closed properly.
    }
}

/* Only called after an SOH character has been received.
The function tries
to receive the remaining characters to form a complete
block.  The member
variable goodBlk1st will be made true if this is the first
time that the block was received in "good" condition.
*/
void ReceiverX::getRestBlk()
{
	// ********* this function must be improved ***********
    int blkSz = Crcflg ? REST_BLK_SZ_CRC : REST_BLK_SZ_CS;
	PE_NOT(myReadcond(mediumD, &rcvBlk[1], blkSz, blkSz, 0, 0), blkSz);
	goodBlk1st = goodBlk = true;
}

//Write chunk (data) in a received block to disk
void ReceiverX::writeChunk()
{
	PE_NOT(write(transferringFileD, &rcvBlk[DATA_POS], CHUNK_SZ), CHUNK_SZ);
}

//Send 8 CAN characters in a row to the XMODEM sender, to inform it of
//	the cancelling of a file transfer
void ReceiverX::can8()
{
	// no need to space CAN chars coming from receiver in time
    char buffer[CAN_LEN];
    memset( buffer, CAN, CAN_LEN);
    PE_NOT(myWrite(mediumD, buffer, CAN_LEN), CAN_LEN);
}
